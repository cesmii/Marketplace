# This workflow will build and run In Browser Selenium Web Driver Tests
#
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: Test|In Browser|Marketplace
on:
  #manually trigger deploy
  workflow_dispatch:
  # Trigger the workflow on push
  #push:
  #  branches:
  #    - develop
  #    - main
  #pull_request:
  #  branches:
  #    - develop
  #    - main

env:
  # Hides some of the differences between running in a Github action and running 
  # in nektos/act on Microsoft Windows with Docker Desktop
  ONGITHUB: true

  # Main project path
  MARKETPLACE_PROJECT_DIRECTORY: './api/CESMII.Marketplace.API/'
  # Main project file name
  MARKETPLACE_PROJECT_FILE: 'CESMII.Marketplace.API.csproj'
  # Main project fqn
  MARKETPLACE_PROJECT_FQDN: './api/CESMII.Marketplace.API/CESMII.Marketplace.API.csproj'
  
  # Paths to Test 1 (In Browser)
  TEST1_PROJECT_DIRECTORY: './api/Tests/CESMII.Marketplace.Tests.InBrowser/'
  TEST1_PROJECT_FILE: 'CESMII.Marketplace.InBrowser.Tests.csproj'
  TEST1_PROJECT_FQDN: './api/Tests/CESMII.Marketplace.Tests.InBrowser/CESMII.Marketplace.InBrowser.Tests.csproj'
  TEST1_PROJECT_DLL: 'CESMII.Marketplace.InBrowser.Tests.dll'

  # Paths to Test 2 (MongoDB)
  TEST2_PROJECT_DIRECTORY: './api/Tests/CESMII.Marketplace.Tests.MongoDB/'
  TEST2_PROJECT_FILE: 'CESMII.Marketplace.Tests.MongoDB.csproj'
  TEST2_PROJECT_FQDN: './api/Tests/CESMII.Marketplace.Tests.MongoDB/CESMII.Marketplace.Tests.MongoDB.csproj'
  TEST2_PROJECT_DLL: 'CESMII.Marketplace.Tests.MongoDB.dll'

  # Paths to Test 3 (RestApi)
  TEST3_PROJECT_DIRECTORY: './api/Tests/CESMII.Marketplace.Tests.RestApi/'
  TEST3_PROJECT_FILE: 'CESMII.Marketplace.Tests.RestApi.csproj'
  TEST3_PROJECT_FQDN: './api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj'
  TEST3_PROJECT_DLL: 'CESMII.Marketplace.Tests.RestApi.dll'

  # set this to the .NET core version to use
  NETCORE_VERSION: "6.0.x"
  # set this to the NODE JS version to use
  NODEJS_VERSION: "16.17.0"
  # set this to npm working directory
  NPM_WORKING_DIRECTORY: 'frontend'

  # Access to our MongoDB
  MONGODB_DATABASE_NAME: "test"

  MONGODB_LOCAL_CONNECTION: "mongodb://testuser:password@localhost:27017"
  MONGODB_CONNECTION: "mongodb://testuser:password@MyMongoDB:27017"

  MOUNT_SOURCE_GITHUB: '/home/runner/work/Marketplace/Marketplace/mongo-data'  
  MOUNT_SOURCE_DESKTOP: 'c:/CESMII.github/Marketplace/mongo-data'

  #VOLUME_APP: '/home/runner/work/Marketplace/Marketplace/api/CESMII.Marketplace.API:/app'
  VOLUME_APP: './api/CESMII.Marketplace.API:/app'
  #VOLUME_APP: 'C:/CESMII.github/Marketplace/api/CESMII.Marketplace.API:/app'

  #VOLUME_SRC: '/home/runner/work/Marketplace/Marketplace:/src'
  VOLUME_SRC: './:/src'
  #VOLUME_SRC: 'C:/CESMII.github/Marketplace:/src'

  #DOCKER_VOLUME_PUBLISH: '/home/runner/work/Marketplace/Marketplace/publish:/publish'
  DOCKER_VOLUME_PUBLISH: './publish:/publish'
  #DOCKER_VOLUME_PUBLISH: '/mnt/c/CESMII.github/Marketplace/publish:/publish'
  
  #DOCKER_FILE_MARKETPLACE: '/home/runner/work/Marketplace/Marketplace/Dockerfile'
  DOCKER_FILE_MARKETPLACE: './api/CESMII.Marketplace.API/Dockerfile'
  #DOCKER_FILE_MARKETPLACE: '/mnt/c/CESMII.github/Marketplace/api/CESMII.Marketplace.API/Dockerfile'

  DOCKER_HOME_FOLDER: './api/CESMII.Marketplace.API'
  #DOCKER_HOME_FOLDER: '/mnt/c/CESMII.github/Marketplace/api/CESMII.Marketplace.API'
    
jobs:
  runner-job:
    runs-on: ubuntu-latest
    steps:
    - name: 1__Marketplace API - Check out the repo
      uses: actions/checkout@v2
      with:
        submodules: true

    # Create bridge network for communication between containers
    - name: 2__Docker - Set up networking
      run: |
          docker network remove --force mysubnet1 ;
          docker network create mysubnet1 ;

    # Initialize a Mongo DB database
    # Note: the "env" section seems not to work and so
    # the -e switches are necessary
    - name: 3__MongoDB - Create MongoDB Docker container (On Github)
      if: env.ONGITHUB == 'true'
      run: docker run -d -P -p 27017:27017 --name=MyMongoDB --network mysubnet1 -e MONGO_INIT_DATABASE=test -e MONGO_INITDB_ROOT_USERNAME=testuser -e MONGO_INITDB_ROOT_PASSWORD=password --mount src="${{env.MOUNT_SOURCE_GITHUB}}",target=/data,type=bind mongo:4.0
      env:
         MONGO_INIT_DATABASE: test 
         MONGO_INITDB_ROOT_USERNAME: testuser
         MONGO_INITDB_ROOT_PASSWORD: password

    - name: 3__MongoDB - Create MongoDB Docker container (On Desktop)
      if: env.ONGITHUB == 'false'
      run: docker run -d -P -p 27017:27017 --name=MyMongoDB --network mysubnet1 -e MONGO_INIT_DATABASE=test -e MONGO_INITDB_ROOT_USERNAME=testuser -e MONGO_INITDB_ROOT_PASSWORD=password --mount src="${{env.MOUNT_SOURCE_DESKTOP}}",target=/data,type=bind mongo:4.0
      env:
         MONGO_INIT_DATABASE: test 
         MONGO_INITDB_ROOT_USERNAME: testuser
         MONGO_INITDB_ROOT_PASSWORD: password

    # Putting this between "Create mongoDB container" and "Populate mongo database" seems to help the mongo container settle down
    - name: 4__Marketplace API - Set up dotnet core ${{ env.NETCORE_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NETCORE_VERSION }}

    - name: 5__MongoDB - Populate mongo database
      run: docker exec -i MyMongoDB mongoimport  --collection=JobLog --file=/data/JobLog.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=LookupItem --file=/data/LookupItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=MarketplaceItem --file=/data/MarketplaceItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=MarketplaceItemAnalytics --file=/data/MarketplaceItemAnalytics.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Organization --file=/data/Organization.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Permission --file=/data/Permission.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=ProfileItem --file=/data/ProfileItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Publisher --file=/data/Publisher.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=RequestInfo --file=/data/RequestInfo.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=SearchKeyword --file=/data/SearchKeyword.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;

    - name: 6__MongoDB - Test access to Mongo database
      run: dotnet test ${{env.TEST2_PROJECT_DIRECTORY}}${{env.TEST2_PROJECT_FILE}}
      env:
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: ${{env.MONGODB_DATABASE_NAME}}

#######################################################################################################

  # # # marketplace-job:
  # # #   runs-on: ubuntu-latest
  # # #   steps:



  # # #   # # - name: 6__Marketplace API - Restore dependencies (${{env.MARKETPLACE_PROJECT_FILE}})
  # # #   # #   run: dotnet restore ${{env.MARKETPLACE_PROJECT_FILE}}
  # # #   # #   working-directory: ${{env.MARKETPLACE_PROJECT_DIRECTORY}}

  # # #   # # - name: 7__Marketplace API - Build (${{env.MARKETPLACE_PROJECT_FILE}})
  # # #   # #   run: dotnet build ${{env.MARKETPLACE_PROJECT_FILE}} --configuration Release --no-restore
  # # #   # #   working-directory: ${{env.MARKETPLACE_PROJECT_DIRECTORY}}


  # # # marketplace-next-job:
  # # #   runs-on: ubuntu-latest

  # # #   steps:
    # Publish the app and the tests
    - name: 7__Marketplace - Publish everything - apps and tests
      run: |
        dotnet publish --framework:net6.0 ${{env.MARKETPLACE_PROJECT_FQDN}} -c Release -o ./publish ;
        #dotnet publish --framework:net6.0 ${{env.TEST1_PROJECT_FQDN}} -c Release -o ./publish ;
        dotnet publish --framework:net6.0 ${{env.TEST2_PROJECT_FQDN}} -c Release -o ./publish ;
        dotnet publish --framework:net6.0 ${{env.TEST3_PROJECT_FQDN}} -c Release -o ./publish ;

    - name: 6__MongoDB - Test access to Mongo database
      run: dotnet test --no-build ${{env.TEST2_PROJECT_FQDN}}
      env:
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: ${{env.MONGODB_DATABASE_NAME}}

    # Create a Docker Container for Marketplace
    - name: 8__Marketplace - Build Docker Image
      #run: docker build -f "/mnt/c/CESMII.github/Marketplace/api/CESMII.Marketplace.API/Dockerfile" --force-rm -t cesmiimarketplaceapi:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=CESMII.Marketplace.API" "/mnt/c/CESMII.github/Marketplace"
      #run: docker build -f "./api/CESMII.Marketplace.API/Dockerfile" --force-rm -t cesmiimarketplaceapi:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=CESMII.Marketplace.API" "/mnt/c/CESMII.github/Marketplace"
      run: docker build -f "./api/CESMII.Marketplace.API/Dockerfile" --force-rm -t cesmiimarketplaceapi:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=CESMII.Marketplace.API" "./"
      #run: docker build -f "/home/runner/work/Marketplace/Marketplace/api/CESMII.Marketplace.API/Dockerfile" --force-rm -t cesmiimarketplaceapi:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=CESMII.Marketplace.API" "/home/runner/work/Marketplace/Marketplace"

    # Start Marketplace Container
    - name: 9__Marketplace - Start the Container (On Github)
      if: env.ONGITHUB == 'true'
      env:
         ASPNETCORE_ENVIRONMENT: Development
         ASPNETCORE_URLS: http://+:80
         ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
         DOTNET_RUNNING_IN_CONTAINER: true
         DOTNET_USE_POLLING_FILE_WATCHER: 1
         EnableCloudLibSearch: false
         MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: test
      run: |
           docker run -dt -v "/home/runner/work/Marketplace/Marketplace/api/CESMII.Marketplace.API:/app" -v "/home/runner/work/Marketplace/Marketplace:/src/" -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "EnableCloudLibSearch=false" -e "ASPNETCORE_URLS=https://+:443;http://+:80" -p 5000:80 -p 5001:437 -P --name CESMII.Marketplace.API --entrypoint tail cesmiimarketplaceapi:dev -f /dev/null

    - name: 9__Marketplace - Start the Container (On Desktop)
      if: env.ONGITHUB == 'false'
      env:
         ASPNETCORE_ENVIRONMENT: Development
         ASPNETCORE_URLS: http://+:80
         ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
         DOTNET_RUNNING_IN_CONTAINER: true
         DOTNET_USE_POLLING_FILE_WATCHER: 1
         EnableCloudLibSearch: false
         MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: test
      run: |
           docker run -dt -v "C:\Users\paul\AppData\Roaming\Microsoft\UserSecrets:/root/.microsoft/usersecrets:ro" -v "C:\Users\paul\AppData\Roaming\ASP.NET\Https:/root/.aspnet/https:ro" -v "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\TokenService.Proxy\linux-x64\net6.0:/TokenService.Proxy:ro" -v "C:\CESMII.github\Marketplace\api\CESMII.Marketplace.API:/app" -v "C:\CESMII.github\Marketplace:/src/" -v "C:\Users\paul\.nuget\packages\:/root/.nuget/fallbackpackages" -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "ASPNETCORE_URLS=http://+:80" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "NUGET_PACKAGES=/root/.nuget/fallbackpackages" -e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages" -e "EnableCloudLibSearch=false" -p 5000:80 -P --name CESMII.Marketplace.API --entrypoint tail cesmiimarketplaceapi:dev -f /dev/null

    - name: 10__Marketplace - Start the Main Dll in the Container (Github)
      if: env.ONGITHUB == 'true'
      env:
         ASPNETCORE_ENVIRONMENT: Development
         ASPNETCORE_URLS: http://+:80
         ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
         DOTNET_RUNNING_IN_CONTAINER: true
         DOTNET_USE_POLLING_FILE_WATCHER: 1
         EnableCloudLibSearch: false
         MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: test
      run: |
           # docker exec -d CESMII.Marketplace.API dotnet /app/bin/release/net6.0/CESMII.Marketplace.API.dll
           # dotnet ${{env.MARKETPLACE_PROJECT_DIRECTORY}}publish/CESMII.Marketplace.API.dll
           docker exec -i CESMII.Marketplace.API dotnet /src/publish/CESMII.Marketplace.API.dll
    
    - name: 10__Marketplace - Start the Main Dll in the Container (Desktop)
      if: env.ONGITHUB == 'false'
      env:
         ASPNETCORE_ENVIRONMENT: Development
         ASPNETCORE_URLS: http://+:80
         ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
         DOTNET_RUNNING_IN_CONTAINER: true
         DOTNET_USE_POLLING_FILE_WATCHER: 1
         EnableCloudLibSearch: false
         MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: test
      run: |
           # docker exec -d CESMII.Marketplace.API dotnet /app/bin/release/net6.0/CESMII.Marketplace.API.dll
           # dotnet ${{env.MARKETPLACE_PROJECT_DIRECTORY}}publish/CESMII.Marketplace.API.dll
           docker exec -di CESMII.Marketplace.API dotnet /src/publish/CESMII.Marketplace.API.dll

    # Query Docker
    - name: 11__Query Docker 
      run:
        docker container ls ;
        docker system info ;
        docker port CESMII.Marketplace.API ;

    # Dotnet -- diagnostics
    - name: 12__DotNet - Diagnostics
      #run: docker exec -i MyMarketplace /usr/share/dotnet/dotnet --diagnostics
      run: docker exec -i CESMII.Marketplace.API /usr/share/dotnet/dotnet --diagnostics

    # Dotnet -- info
    - name: 13__DotNet - Info
      run: docker exec -i CESMII.Marketplace.API /usr/share/dotnet/dotnet --info

    # Dotnet -- list-runtimes
    - name: 14__DotNet - list-runtimes
      run: docker exec -i CESMII.Marketplace.API /usr/share/dotnet/dotnet --list-runtimes

    # Dotnet -- list-sdks
    - name: 15__DotNet - list-sdks
      run: docker exec -i CESMII.Marketplace.API /usr/share/dotnet/dotnet --list-sdks

    # Dotnet --version
    - name: 16__DotNet - Version
      run: docker exec -i CESMII.Marketplace.API /usr/share/dotnet/dotnet --version

    # MyMongoDB - Check the Logs
    - name: 17__MyMongoDB Container - Check the Logs
      run: docker logs --details MyMongoDB

    # CESMII.Marketplace.API - Check the Logs
    - name: 18__CESMII.Marketplace.API Container - Check the Logs
      run: docker logs --details CESMII.Marketplace.API

    # Call Marketplace Api 
    # This doesn not work, but am going to try calling from outside the container just to see if that can work at all
    - name: 19__Tests - Access to RectApi inside container (On Github)
      if: env.ONGITHUB == 'true'
      env:
        MARKETPLACE_URL1: "http://localhost:80/api"
      # run: docker exec -i CESMII.Marketplace.API dotnet test -e "MARKETPLACE_URL1=http://localhost:80/api" /src/api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj
      run: docker exec -i CESMII.Marketplace.API dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:80/api" ${{env.TEST3_PROJECT_FQDN}}

    # Call Marketplace Api 
    - name: 20__Tests - Access to RectApi inside container (On Github)
      if: env.ONGITHUB == 'true'
      env:
        MARKETPLACE_URL1: "http://localhost:5000/api"
      # run: dotnet test -e "MARKETPLACE_URL1=http://localhost:5000/api" ./api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj
      run: dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:5000/api" ${{env.TEST3_PROJECT_FQDN}}


    # Calling RestApi - Access from inside container (On Desktop)
    - name: 19__Tests - Access to RectApi inside container (On Desktop)
      if: env.ONGITHUB == 'false'
      env:
        MARKETPLACE_URL1: "http://localhost:5000/api"
      # run: docker exec -i CESMII.Marketplace.API dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:5000/api" /src/api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj
      run: docker exec -i CESMII.Marketplace.API dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:5000/api" ${{env.TEST3_PROJECT_FQDN}}

    # Calling RestApi - Access from outside container (On Desktop)
    - name: 20__Tests - Access to RectApi outside container (On Desktop)
      if: env.ONGITHUB == 'false'
      env:
        MARKETPLACE_URL1: "http://localhost:5000/api"
      # run: dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:5000/api" ./api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj
      run: dotnet test  --no-build -e "MARKETPLACE_URL1=http://localhost:5000/api" ${{env.TEST3_PROJECT_FQDN}}

#######################################################################################################

    # # Call Marketplace Api 
    # - name: 15__Tests - Access to RectApi on runner (outside container)
    #   env:
    #     MARKETPLACE_URL1: "http://localhost:5000/api"
    #   # # # run: dotnet test -e "MARKETPLACE_URL1=http://localhost:5000/api" /home/runner/work/Marketplace/Marketplace/api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj
    #   run: dotnet test -e "MARKETPLACE_URL1=http://localhost:5000/api" /src/api/Tests/CESMII.Marketplace.Tests.RestApi/CESMII.Marketplace.Tests.RestApi.csproj

    # - name: Marketplace API - Start up Marketplace Server
    #   env:
    #     EnableCloudLibSearch: false
    #     MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_CONNECTION}}
    #     MARKETPLACE_MONGODB_DATABASE: test
    #   run: dotnet run --project ./api/CESMII.Marketplace.API/CESMII.Marketplace.API.csproj &

    # # Create a Docker Container for Marketplace
    # - name: Marketplace - Build Container
    #   run: docker build -f ${{env.DOCKER_FILE_MARKETPLACE}}  -t cesmiimarketplaceapi:dev --target base  ${{env.DOCKER_HOME_FOLDER}}

    # # Start Marketplace Container
    # - name: Marketplace - Launch Container
    #   env:
    #      ASPNETCORE_ENVIRONMENT: Development
    #      ASPNETCORE_HTTPS_PORT: 5001
    #      ASPNETCORE_URLS: https://+:443;http://+:80
    #      ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
    #      DOTNET_GENERATE_ASPNET_CERTIFICATE: true
    #      DOTNET_RUNNING_IN_CONTAINER: true
    #      DOTNET_USE_POLLING_FILE_WATCHER: 1
    #      EnableCloudLibSearch: false
    #      MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
    #      MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_CONNECTION}}
    #      MARKETPLACE_MONGODB_DATABASE: test
    #   run: docker run -dt -p 5001:443 -p 32775:80 -P  --log-driver=local --network mysubnet1 --name=MyMarketplace -v ${{env.VOLUME_APP}} -v ${{env.VOLUME_SRC}}  --entrypoint tail cesmiimarketplaceapi:dev


    # Peek at docker status
    - name: 21__Docker - Peeking at docker status 
      run: docker container ls --all ; 
           docker network ls ;
           docker network inspect mysubnet1 ;




    #- name: FrontEnd - Start browser and fetch version
    #  run:  chrome --version

    #- name: FrontEnd - Use Node.js version (${{env.NODEJS_VERSION}})
    #  uses: actions/setup-node@v1
    #  with: 
    #    node-version: ${{env.NODEJS_VERSION}}

    #- name: FrontEnd - Build React Code - npm install, build
    #  working-directory: ${{env.NPM_WORKING_DIRECTORY}}
    #  env: 
    #    CI: '' #when process-env-ci is true, warnings are ignored and not treated as errors
    #  run: |
    #    npm install
    #    npm run build:in-browser-test 
    #    npm run start-in-browser-test &

    ##- name: Docker - launch standalone chrome browser
    ##  run: |
    ##    docker run -d -p 4444:4444 selenium/standalone-chrome

    #- name: In-Browser Testing - Restore dependencies CESMII.Marketplace.InBrowser.Tests
    #  working-directory:  ${{env.SOLUTION_DIRECTORY}}
    #  run: dotnet restore

    #- name: In-Browser Testing - Run Test on project (${{env.TEST1_PROJECT_FILE}})
    #  run: dotnet test ${{env.SOLUTION_DIRECTORY}}api/Tests/CESMII.Marketplace.InBrowser.Tests/${{env.TEST1_PROJECT_FILE}}.csproj --configuration Staging --verbosity normal -l:"console;verbosity=normal"
    #  working-directory: ${{env.SOLUTION_DIRECTORY}}

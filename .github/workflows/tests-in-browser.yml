# This workflow will build and run In Browser Selenium Web Driver Tests
#
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: Test|In Browser|Marketplace
on:
  #manually trigger deploy
  workflow_dispatch:
  # Trigger the workflow on push
  #push:
  #  branches:
  #    - develop
  #    - main
  #pull_request:
  #  branches:
  #    - develop
  #    - main

env:
  # set this to the path to your solution file
  SOLUTION_DIRECTORY: './'      
  # Solution file name
  SOLUTION_FILE: 'CESMII.Marketplace.sln'      
  # Set this to the path to your test project file
  PROJECT_DIRECTORY: './api/Tests/CESMII.Marketplace.InBrowser.Tests/'
  # Test project file to use
  PROJECT_NAME: 'CESMII.Marketplace.InBrowser.Tests'      
  # set this to the .NET core version to use
  NETCORE_VERSION: "6.0.x"
  # set this to the NODE JS version to use
  NODEJS_VERSION: "16.17.0"
  # set this to npm working directory
  NPM_WORKING_DIRECTORY: 'frontend'
  # Cloud Library Password
  CLOUDLIB_PASSWORD: 'NotUsedAnymore'

  # Access to our MongoDB
  MONGODB_DATABASE_NAME: "test"

  MARKETPLACE_RESTAPI_URL: https://MyMarketplace:5001/api

  MONGODB_LOCAL_CONNECTION: "mongodb://testuser:password@localhost:27017"
  MONGODB_CONNECTION: "mongodb://testuser:password@MyMongoDB:27017"

  MOUNT_SOURCE: "/home/runner/work/Marketplace/Marketplace/mongo-data"    # In a Github Action
  # MOUNT_SOURCE: "c:/CESMII.github/Marketplace/mongo-data"               # On the desktop

  VOLUME_APP: "/home/runner/work/Marketplace/Marketplace/api/CESMII.Marketplace.API:/app"
  # VOLUME_APP: "C:/CESMII.github/Marketplace/api/CESMII.Marketplace.API:/app"

  VOLUME_SRC: "/home/runner/work/Marketplace/Marketplace:/src/"
  # VOLUME_SRC: "C:/CESMII.github/Marketplace:/src/"

  DOCKER_FILE_MARKETPLACE: "/home/runner/work/Marketplace/Marketplace/Dockerfile"
  # DOCKER_FILE_MARKETPLACE: /mnt/c/CESMII.github/Marketplace/Dockerfile

  DOCKER_HOME_FOLDER: "/home/runner/work/Marketplace/Marketplace"
  # DOCKER_HOME_FOLDER: /mnt/c/CESMII.github/Marketplace/
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: GitHub Security Mask
      run: | 
          echo ::add-mask::$env.MONGODB_CONNECTION ;
          echo ::add-mask::$env.MONGODB_LOCAL_CONNECTION ;

    - name: Marketplace API - Check out the repo
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Docker - Set up networking
      run: |
          docker network remove --force mysubnet1 ;
          docker network create mysubnet1 ;

    # Initialize a Mongo DB database
    # Note: the "env" section seems not to work and so
    # the -e switches are necessary
    - name: MongoDB - Create MongoDB Docker container      
      run: docker run -d -P -p 27017:27017 --name=MyMongoDB --network mysubnet1 -e MONGO_INIT_DATABASE=test -e MONGO_INITDB_ROOT_USERNAME=testuser -e MONGO_INITDB_ROOT_PASSWORD=password --mount src="${{env.MOUNT_SOURCE}}",target=/data,type=bind mongo:4.0
      env:
         MONGO_INIT_DATABASE: test 
         MONGO_INITDB_ROOT_USERNAME: testuser
         MONGO_INITDB_ROOT_PASSWORD: password

    # Putting this between "Create mongoDB container" and "Populate mongo database" seems to help the mongo container settle down
    - name: Marketplace API - Set up dotnet core ${{ env.NETCORE_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NETCORE_VERSION }}

    - name: MongoDB - Populate mongo database
      run: docker exec -i MyMongoDB mongoimport  --collection=JobLog --file=/data/JobLog.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=LookupItem --file=/data/LookupItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=MarketplaceItem --file=/data/MarketplaceItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=MarketplaceItemAnalytics --file=/data/MarketplaceItemAnalytics.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Organization --file=/data/Organization.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Permission --file=/data/Permission.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=ProfileItem --file=/data/ProfileItem.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=Publisher --file=/data/Publisher.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=RequestInfo --file=/data/RequestInfo.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;
           docker exec -i MyMongoDB mongoimport  --collection=SearchKeyword --file=/data/SearchKeyword.json  --uri="${{env.MONGODB_LOCAL_CONNECTION}}" ;

    - name: Marketplace API - Restore dependencies (${{env.SOLUTION_FILE}})
      run: dotnet restore ${{env.SOLUTION_FILE}}
      working-directory: ${{env.SOLUTION_DIRECTORY}}

    - name: Marketplace API - Build (${{env.SOLUTION_FILE}})
      run: dotnet build ${{env.SOLUTION_FILE}} --configuration Release --no-restore

    - name: MongoDB - Test access to Mongo database
      run: dotnet test ./api/Tests/CESMII.Marketplace.MongoDB/CESMII.Marketplace.MongoDB.csproj
      env:
         TEST_CONNECTIONSTRING: ${{env.MONGODB_LOCAL_CONNECTION}}
         TEST_DATABASE_NAME: ${{env.MONGODB_DATABASE_NAME}}
   
    # - name: MongoDB - Get list of test result files
    #   run: ls -al /home/runner/work/Marketplace/Marketplace/api/Tests/CESMII.Marketplace.MongoDB/TestResults

    # - name: MongoDB - Dump contents of test result files
    #   run: cat --number /home/runner/work/Marketplace/Marketplace/api/Tests/CESMII.Marketplace.MongoDB/TestResults/*


    # - name: Marketplace API - Start up Marketplace Server
    #   env:
    #     EnableCloudLibSearch: false
    #     MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_CONNECTION}}
    #     MARKETPLACE_MONGODB_DATABASE: test
    #   run: dotnet run --project ./api/CESMII.Marketplace.API/CESMII.Marketplace.API.csproj &

    # Create a Docker Container for Marketplace
    - name: Marketplace - Build Container
      run: docker build -f ${{env.DOCKER_FILE_MARKETPLACE}}  -t cesmiimarketplaceapi:dev --target base  ${{env.DOCKER_HOME_FOLDER}}

    # Start Marketplace Server
    - name: Marketplace - Start Server Running
      env:
         ASPNETCORE_ENVIRONMENT: Development
         ASPNETCORE_HTTPS_PORT: 5001
         ASPNETCORE_URLS: https://+:443;http://+:80
         ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
         DOTNET_GENERATE_ASPNET_CERTIFICATE: true
         DOTNET_RUNNING_IN_CONTAINER: true
         DOTNET_USE_POLLING_FILE_WATCHER: 1
         EnableCloudLibSearch: false
         MARKETPLACE_GITHUB_WORKFLOW_COMMANDS: true
         MARKETPLACE_MONGODB_CONNECTIONSTRING: ${{env.MONGODB_CONNECTION}}
         MARKETPLACE_MONGODB_DATABASE: test
      run: docker run -dt -p 5001:443 -p 32775:80 -P  --log-driver=local --network mysubnet1 --name=MyMarketplace -v ${{env.VOLUME_APP}} -v ${{env.VOLUME_SRC}}  --entrypoint tail cesmiimarketplaceapi:dev

    # Peek at docker status
    - name: Docker - Peeking at docker status 
      run: docker container ls --all ; 
           docker network ls ;
           docker network inspect mysubnet1 ;

    # Give the server a chance to start up
    - name: Docker - Waiting for Marketplace Server to start -- 1
      run: sleep 10

    # Check the logs 
    - name: Marketplace - Read the Logs to see whether startup was okay or not -- 1
      run: docker logs --details MyMarketplace

    # Call Marketplace Api from INSIDE container MyMarketplace
    - name: Test Logging - from INSIDE container MyMarketplace
      env:
        MARKETPLACE_URL: ${{env.MARKETPLACE_RESTAPI_URL}}
      run: docker exec -e "MARKETPLACE_URL=${{env.MARKETPLACE_RESTAPI_URL}}" -i MyMarketplace  dotnet test /home/runner/work/Marketplace/Marketplace/api/Tests/CESMII.Marketplace.RestApi/CESMII.Marketplace.RestApi.csproj

    # Call Marketplace Api from OUTSIDE container MyMarketplace
    - name: Test Logging - from OUTSIDE container MyMarketplace
      env:
        MARKETPLACE_URL: "https://localhost:5001/api"
      run: dotnet test /src/api/Tests/CESMII.Marketplace.RestApi/CESMII.Marketplace.RestApi.csproj

    # # Test Logging - Get list of output files created
    # - name: Marketplace REST - Get list of test result files
    #   run: |
    #       docker exec -i MyMarketplace ls -al /src ;
    #       docker exec -i MyMarketplace ls -al /src/api ;
    #       docker exec -i MyMarketplace ls -al /src/api/Tests ;
    #       docker exec -i MyMarketplace ls -al /src/api/Tests/CESMII.Marketplace.RestApi ;
    #       docker exec -i MyMarketplace ls -al /src/api/Tests/CESMII.Marketplace.RestApi/TestResults ;

    # - name: Marketplace REST - Dump contents of test result files
    #   run: cat --number /src/api/Tests/CESMII.Marketplace.RestApi/TestResults/*

    
    #- name: FrontEnd - Start browser and fetch version
    #  run:  chrome --version

    #- name: FrontEnd - Use Node.js version (${{env.NODEJS_VERSION}})
    #  uses: actions/setup-node@v1
    #  with: 
    #    node-version: ${{env.NODEJS_VERSION}}

    #- name: FrontEnd - Build React Code - npm install, build
    #  working-directory: ${{env.NPM_WORKING_DIRECTORY}}
    #  env: 
    #    CI: '' #when process-env-ci is true, warnings are ignored and not treated as errors
    #  run: |
    #    npm install
    #    npm run build:in-browser-test 
    #    npm run start-in-browser-test &

    ##- name: Docker - launch standalone chrome browser
    ##  run: |
    ##    docker run -d -p 4444:4444 selenium/standalone-chrome

    #- name: In-Browser Testing - Restore dependencies CESMII.Marketplace.InBrowser.Tests
    #  working-directory:  ${{env.SOLUTION_DIRECTORY}}
    #  run: dotnet restore

    #- name: In-Browser Testing - Run Test on project (${{env.PROJECT_NAME}})
    #  run: dotnet test ${{env.SOLUTION_DIRECTORY}}api/Tests/CESMII.Marketplace.InBrowser.Tests/${{env.PROJECT_NAME}}.csproj --configuration Staging --verbosity normal -l:"console;verbosity=normal"
    #  working-directory: ${{env.SOLUTION_DIRECTORY}}
